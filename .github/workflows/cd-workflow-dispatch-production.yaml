name: cd-workflow-dispatch-production
on:
  workflow_dispatch:
    inputs:
      version_tag:
        type: string
        description: "Specify release/tag. Skip this when deploy `main_backup`. Format: x.y.z"
        required: false
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: "code: check out code"
        uses: actions/checkout@v2

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: echo
        run: echo ${{ steps.extract_branch.outputs.branch }}

      - name: Create Release
        if: inputs.version_tag != null
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ inputs.version_tag }}
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Test Show Result
        uses: actions/github-script@v6
        if: inputs.version_tag != null
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployOutput = `#### Preview Release: \<${{ steps.create_release.outputs.id }}>`;

            // Get the existing comments.
            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.number,
            });
            // Find any comment already made by the bot.
            const botComment = comments.find(comment => comment.user.id === 41898282);
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: deployOutput
              })
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.number,
                body: deployOutput
              })
            };
